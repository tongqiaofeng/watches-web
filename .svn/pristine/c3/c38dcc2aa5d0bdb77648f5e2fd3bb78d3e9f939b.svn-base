{"remainingRequest":"D:\\aa-tong\\my-projects\\watches\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\aa-tong\\my-projects\\watches\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\aa-tong\\my-projects\\watches\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\aa-tong\\my-projects\\watches\\src\\components\\login\\login.vue?vue&type=template&id=dd7a443a&scoped=true&","dependencies":[{"path":"D:\\aa-tong\\my-projects\\watches\\src\\components\\login\\login.vue","mtime":1585542721562},{"path":"D:\\aa-tong\\my-projects\\watches\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\aa-tong\\my-projects\\watches\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\aa-tong\\my-projects\\watches\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\aa-tong\\my-projects\\watches\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}