{"remainingRequest":"D:\\aa-tong\\upgrade\\up-watches\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\aa-tong\\upgrade\\up-watches\\src\\components\\views\\upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\aa-tong\\upgrade\\up-watches\\src\\components\\views\\upload.vue","mtime":1585632336783},{"path":"D:\\aa-tong\\upgrade\\up-watches\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\aa-tong\\upgrade\\up-watches\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\aa-tong\\upgrade\\up-watches\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\aa-tong\\upgrade\\up-watches\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgaW1nU3JjOiBbXSwKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIOS4iuS8oOWbvueJhwogICAgaW5wdXRDaGFuZ2UoZmlsZSkgewogICAgICBjb25zb2xlLmxvZyhmaWxlKTsKICAgICAgbGV0IGltZ0ZpbGVzID0gZmlsZS50YXJnZXQuZmlsZXM7CiAgICAgIGNvbnNvbGUubG9nKGltZ0ZpbGVzKTsKICAgICAgdGhpcy51cGxvYWRTZWN0aW9uRmlsZShpbWdGaWxlcyk7CiAgICB9LAogICAgLy8g5LiK5Lyg5YmN5Y6L57yp55qE5pa55rOVCiAgICB1cGxvYWRTZWN0aW9uRmlsZShmKSB7IC8vCemZhOS7tuS4iuS8oAogICAgICBjb25zb2xlLmxvZyhmKTsKICAgICAgbGV0IHNlbGYgPSB0aGlzOwogICAgICBsZXQgT3JpZW50YXRpb247CiAgICAgIGxldCBuZGF0YTsKICAgICAgY29uc29sZS5sb2coJ+WbvueJh+WwuuWvuCcpOwogICAgICBjb25zb2xlLmxvZyhmWzBdLnNpemUpOwogICAgICAvLyAqIDEwMjQgKiAxMDI0CiAgICAgIGlmIChmWzBdLnNpemUgPD0gMSAqIDEwMjQgKiAxMDI0KSB7CiAgICAgICAgLy/liKTmlq3lm77niYfmmK/lkKblpKfkuo4xTSzmmK/lsLHnm7TmjqXkuIrkvKAKICAgICAgICBuZGF0YSA9IGZbMF07CiAgICAgICAgc2VsZi5wb3N0SW1nKG5kYXRhKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvL+WPjeS5i+WOi+e8qeWbvueJhwogICAgICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwogICAgICAgIC8vIOWwhuWbvueJhzLlsIbovazmiJAgYmFzZTY0IOagvOW8jwogICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZbMF0pOwogICAgICAgIGNvbnNvbGUubG9nKHJlYWRlcikKICAgICAgICAvLyDor7vlj5bmiJDlip/lkI7nmoTlm57osIMKICAgICAgICByZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucmVzdWx0OwogICAgICAgICAgbGV0IGltZyA9IG5ldyBJbWFnZSgpOwogICAgICAgICAgaW1nLnNyYyA9IHJlc3VsdDsKICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGxldCBkYXRhID0gc2VsZi5jb21wcmVzcyhpbWcsIE9yaWVudGF0aW9uKTsKICAgICAgICAgICAgc2VsZi5oZWFkZXJJbWFnZSA9IGRhdGE7CiAgICAgICAgICAgIG5kYXRhID0gc2VsZi5jb21wcmVzcyhpbWcsIE9yaWVudGF0aW9uKTsKICAgICAgICAgICAgY29uc29sZS5sb2coJ25kYXRh5YC8Jyk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKG5kYXRhKTsKICAgICAgICAgICAgLy9CQVNFNjTovazlm77niYcKICAgICAgICAgICAgdmFyIGFyciA9IG5kYXRhLnNwbGl0KCcsJyksCiAgICAgICAgICAgICAgbWltZSA9IGFyclswXS5tYXRjaCgvOiguKj8pOy8pWzFdLAogICAgICAgICAgICAgIGJzdHIgPSBhdG9iKGFyclsxXSksCiAgICAgICAgICAgICAgbiA9IGJzdHIubGVuZ3RoLAogICAgICAgICAgICAgIHU4YXJyID0gbmV3IFVpbnQ4QXJyYXkobik7CiAgICAgICAgICAgIHdoaWxlIChuLS0pIHsKICAgICAgICAgICAgICB1OGFycltuXSA9IGJzdHIuY2hhckNvZGVBdChuKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBuZGF0YSA9IG5ldyBGaWxlKFt1OGFycl0sIGZbMF0ubmFtZSwgewogICAgICAgICAgICAgIHR5cGU6IG1pbWUKICAgICAgICAgICAgfSkKICAgICAgICAgICAgY29uc29sZS5sb2coJzZ3ZWVlZWUnKTsKICAgICAgICAgICAgY29uc29sZS5sb2cobmRhdGEpOwogICAgICAgICAgICBzZWxmLnBvc3RJbWcobmRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGFzeW5jIHBvc3RJbWcobmRhdGEpIHsKICAgICAgbGV0IGZvcm1kYXRhMSA9IG5ldyBGb3JtRGF0YSgpOyAvL+WIm+W7umZvcm3lr7nosaEKICAgICAgY29uc29sZS5sb2coJzk5OTk5OTk5OTknKTsKICAgICAgY29uc29sZS5sb2cobmRhdGEuc2l6ZSk7CiAgICAgIGZvcm1kYXRhMS5hcHBlbmQoImltZyIsIG5kYXRhKTsgLy/pgJrov4dhcHBlbmTlkJFmb3Jt5a+56LGh5re75Yqg5pWw5o2uCiAgICAgIC8vIGNvbnNvbGUubG9nKGZvcm1VcGxvYWQxKTsKICAgICAgdGhpcy51cGxvYWRJbWcoZm9ybWRhdGExKTsKICAgIH0sCiAgICBjb21wcmVzcyhpbWcsIE9yaWVudGF0aW9uKSB7CiAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTsKICAgICAgbGV0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogICAgICAvL+eTpueJh2NhbnZhcwogICAgICBsZXQgdENhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpOwogICAgICBsZXQgdGN0eCA9IHRDYW52YXMuZ2V0Q29udGV4dCgiMmQiKTsKICAgICAgbGV0IGluaXRTaXplID0gaW1nLnNyYy5sZW5ndGg7CiAgICAgIGxldCB3aWR0aCA9IGltZy53aWR0aDsKICAgICAgbGV0IGhlaWdodCA9IGltZy5oZWlnaHQ7CiAgICAgIC8v5aaC5p6c5Zu+54mH5aSn5LqO5Zub55m+5LiH5YOP57Sg77yM6K6h566X5Y6L57yp5q+U5bm25bCG5aSn5bCP5Y6L6IezNDAw5LiH5Lul5LiLCiAgICAgIGxldCByYXRpbzsKICAgICAgaWYgKChyYXRpbyA9IHdpZHRoICogaGVpZ2h0IC8gNDAwMDAwMCkgPiAxKSB7CiAgICAgICAgY29uc29sZS5sb2coIuWkp+S6jjQwMOS4h+WDj+e0oCIpCiAgICAgICAgcmF0aW8gPSBNYXRoLnNxcnQocmF0aW8pOwogICAgICAgIHdpZHRoIC89IHJhdGlvOwogICAgICAgIGhlaWdodCAvPSByYXRpbzsKICAgICAgfSBlbHNlIHsKICAgICAgICByYXRpbyA9IDE7CiAgICAgIH0KICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7CiAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgIC8vIAkJ6ZO65bqV6ImyCiAgICAgIGN0eC5maWxsU3R5bGUgPSAiI2ZmZiI7CiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpOwogICAgICAvL+WmguaenOWbvueJh+WDj+e0oOWkp+S6jjEwMOS4h+WImeS9v+eUqOeTpueJh+e7mOWItgogICAgICBsZXQgY291bnQ7CiAgICAgIGlmICgoY291bnQgPSB3aWR0aCAqIGhlaWdodCAvIDEwMDAwMDApID4gMSkgewogICAgICAgIGNvbnNvbGUubG9nKCLotoXov4cxMDBX5YOP57SgIik7CiAgICAgICAgY291bnQgPSB+fihNYXRoLnNxcnQoY291bnQpICsgMSk7IC8v6K6h566X6KaB5YiG5oiQ5aSa5bCR5Z2X55Om54mHCiAgICAgICAgLy8gICAgICAgICAgICDorqHnrpfmr4/lnZfnk6bniYfnmoTlrr3lkozpq5gKICAgICAgICBsZXQgbncgPSB+fih3aWR0aCAvIGNvdW50KTsKICAgICAgICBsZXQgbmggPSB+fihoZWlnaHQgLyBjb3VudCk7CiAgICAgICAgdENhbnZhcy53aWR0aCA9IG53OwogICAgICAgIHRDYW52YXMuaGVpZ2h0ID0gbmg7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7CiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvdW50OyBqKyspIHsKICAgICAgICAgICAgdGN0eC5kcmF3SW1hZ2UoaW1nLCBpICogbncgKiByYXRpbywgaiAqIG5oICogcmF0aW8sIG53ICogcmF0aW8sIG5oICogcmF0aW8sIDAsIDAsIG53LCBuaCk7CiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UodENhbnZhcywgaSAqIG53LCBqICogbmgsIG53LCBuaCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTsKICAgICAgfQogICAgICAvL+i/m+ihjOacgOWwj+WOi+e8qQogICAgICBsZXQgbmRhdGEgPSBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9qcGVnJywgMC43KTsKCiAgICAgIGNvbnNvbGUubG9nKCfljovnvKnliY3vvJonICsgaW5pdFNpemUpOwogICAgICBjb25zb2xlLmxvZygn5Y6L57yp5ZCO77yaJyArIG5kYXRhLmxlbmd0aCk7CiAgICAgIGNvbnNvbGUubG9nKCJuZGF0YToiICsgbmRhdGEpCgogICAgICBjb25zb2xlLmxvZygn5Y6L57yp546H77yaJyArIH5+KDEwMCAqIChpbml0U2l6ZSAtIG5kYXRhLmxlbmd0aCkgLyBpbml0U2l6ZSkgKyAiJSIpOwogICAgICB0Q2FudmFzLndpZHRoID0gdENhbnZhcy5oZWlnaHQgPSBjYW52YXMud2lkdGggPSBjYW52YXMuaGVpZ2h0ID0gMDsKICAgICAgcmV0dXJuIG5kYXRhOwogICAgfSwKICAgIHVwbG9hZEltZyhmb3JtZGF0YSkgewogICAgICB0aGlzLiRheGlvcwogICAgICAgIC5wb3N0KHRoaXMuJHN0b3JlLnN0YXRlLmJhc2VVcmwgKyAiL2ltZ3JlY3YiLCBmb3JtZGF0YSkKICAgICAgICAudGhlbihyZXMgPT4gewogICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT0gMjAwKSB7CiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uuc3VjY2Vzcyh7CiAgICAgICAgICAgICAgbWVzc2FnZTogIuWbvueJh+S4iuS8oOaIkOWKnyIsCiAgICAgICAgICAgICAgc2hvd0Nsb3NlOiB0cnVlLAogICAgICAgICAgICAgIGR1cmF0aW9uOiAyMDAwCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgY29uc29sZS5sb2cocmVzKTsKICAgICAgICAgIGNvbnNvbGUubG9nKCLkuIrkvKDlm77niYfnu5PmnpwiKTsKICAgICAgICAgIGxldCBpbWd1cmwgPSByZXMuZGF0YS5pbWd1cmw7CiAgICAgICAgICBpZiAodGhpcy5pbWdTcmMuaW5kZXhPZihpbWd1cmwpID09IC0xKSB7CiAgICAgICAgICAgIHRoaXMuaW1nU3JjLnB1c2goaW1ndXJsKTsKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICAgIC5jYXRjaChlcnIgPT4gewogICAgICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoewogICAgICAgICAgICBtZXNzYWdlOiBlcnIuZGF0YS5tZXNzYWdlLAogICAgICAgICAgICBzaG93Q2xvc2U6IHRydWUsCiAgICAgICAgICAgIGR1cmF0aW9uOiAyMDAwCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH0sCiAgICAvLyDliKDpmaTlm77niYcKICAgIGRlbEltYWdlKGluZGV4KSB7CiAgICAgIHRoaXMuaW1nU3JjLnNwbGljZShpbmRleCwgMSk7CiAgICB9LAogIH0KfQoK"},{"version":3,"sources":["upload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqfile":"upload.vue","sourceRoot":"src/components/views","sourcesContent":["<template>\r\n  <div>\r\n    <div style=\"display:flex;\">\r\n      <div class=\"upload-imgs\">\r\n        <div class=\"add\">\r\n          <form id=\"formUpload\" enctype=\"multipart/form-data\">\r\n            <input @change=\"inputChange($event)\" type=\"file\" name=\"img\" accept='image/*' class=\"inputUpload\" multiple />\r\n            <i class=\"el-icon-plus addIcon\"></i>\r\n          </form>\r\n        </div>\r\n        <div style=\"display:flex;position:relative;\" id=\"delImg\">\r\n          <div v-for=\"(imgurl,index) of imgSrc\" :key=\"index\" style=\"margin-left:10px;position:relative;\">\r\n            <span class=\"spanStyle\" @click=\"delImage(index)\">x</span>\r\n            <img :src=\"img + imgurl\" width=\"100px\" height=\"100px\" style=\"border-radius:5px;object-fit:cover;\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        imgSrc: [],\r\n      }\r\n    },\r\n    methods: {\r\n      // 上传图片\r\n      inputChange(file) {\r\n        console.log(file);\r\n        let imgFiles = file.target.files;\r\n        console.log(imgFiles);\r\n        this.uploadSectionFile(imgFiles);\r\n      },\r\n      // 上传前压缩的方法\r\n      uploadSectionFile(f) { //\t附件上传\r\n        console.log(f);\r\n        let self = this;\r\n        let Orientation;\r\n        let ndata;\r\n        console.log('图片尺寸');\r\n        console.log(f[0].size);\r\n        // * 1024 * 1024\r\n        if (f[0].size <= 1 * 1024 * 1024) {\r\n          //判断图片是否大于1M,是就直接上传\r\n          ndata = f[0];\r\n          self.postImg(ndata);\r\n        } else {\r\n          //反之压缩图片\r\n          let reader = new FileReader();\r\n          // 将图片2将转成 base64 格式\r\n          reader.readAsDataURL(f[0]);\r\n          console.log(reader)\r\n          // 读取成功后的回调\r\n          reader.onloadend = function () {\r\n            let result = this.result;\r\n            let img = new Image();\r\n            img.src = result;\r\n            img.onload = function () {\r\n              let data = self.compress(img, Orientation);\r\n              self.headerImage = data;\r\n              ndata = self.compress(img, Orientation);\r\n              console.log('ndata值');\r\n              console.log(ndata);\r\n              //BASE64转图片\r\n              var arr = ndata.split(','),\r\n                mime = arr[0].match(/:(.*?);/)[1],\r\n                bstr = atob(arr[1]),\r\n                n = bstr.length,\r\n                u8arr = new Uint8Array(n);\r\n              while (n--) {\r\n                u8arr[n] = bstr.charCodeAt(n);\r\n              }\r\n              ndata = new File([u8arr], f[0].name, {\r\n                type: mime\r\n              })\r\n              console.log('6weeeee');\r\n              console.log(ndata);\r\n              self.postImg(ndata);\r\n            }\r\n          }\r\n        }\r\n      },\r\n      async postImg(ndata) {\r\n        let formdata1 = new FormData(); //创建form对象\r\n        console.log('9999999999');\r\n        console.log(ndata.size);\r\n        formdata1.append(\"img\", ndata); //通过append向form对象添加数据\r\n        // console.log(formUpload1);\r\n        this.uploadImg(formdata1);\r\n      },\r\n      compress(img, Orientation) {\r\n        let canvas = document.createElement(\"canvas\");\r\n        let ctx = canvas.getContext('2d');\r\n        //瓦片canvas\r\n        let tCanvas = document.createElement(\"canvas\");\r\n        let tctx = tCanvas.getContext(\"2d\");\r\n        let initSize = img.src.length;\r\n        let width = img.width;\r\n        let height = img.height;\r\n        //如果图片大于四百万像素，计算压缩比并将大小压至400万以下\r\n        let ratio;\r\n        if ((ratio = width * height / 4000000) > 1) {\r\n          console.log(\"大于400万像素\")\r\n          ratio = Math.sqrt(ratio);\r\n          width /= ratio;\r\n          height /= ratio;\r\n        } else {\r\n          ratio = 1;\r\n        }\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        // \t\t铺底色\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        //如果图片像素大于100万则使用瓦片绘制\r\n        let count;\r\n        if ((count = width * height / 1000000) > 1) {\r\n          console.log(\"超过100W像素\");\r\n          count = ~~(Math.sqrt(count) + 1); //计算要分成多少块瓦片\r\n          //            计算每块瓦片的宽和高\r\n          let nw = ~~(width / count);\r\n          let nh = ~~(height / count);\r\n          tCanvas.width = nw;\r\n          tCanvas.height = nh;\r\n          for (let i = 0; i < count; i++) {\r\n            for (let j = 0; j < count; j++) {\r\n              tctx.drawImage(img, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, 0, 0, nw, nh);\r\n              ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);\r\n            }\r\n          }\r\n        } else {\r\n          ctx.drawImage(img, 0, 0, width, height);\r\n        }\r\n        //进行最小压缩\r\n        let ndata = canvas.toDataURL('image/jpeg', 0.7);\r\n\r\n        console.log('压缩前：' + initSize);\r\n        console.log('压缩后：' + ndata.length);\r\n        console.log(\"ndata:\" + ndata)\r\n\r\n        console.log('压缩率：' + ~~(100 * (initSize - ndata.length) / initSize) + \"%\");\r\n        tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0;\r\n        return ndata;\r\n      },\r\n      uploadImg(formdata) {\r\n        this.$axios\r\n          .post(this.$store.state.baseUrl + \"/imgrecv\", formdata)\r\n          .then(res => {\r\n            if (res.status == 200) {\r\n              this.$message.success({\r\n                message: \"图片上传成功\",\r\n                showClose: true,\r\n                duration: 2000\r\n              });\r\n            }\r\n            console.log(res);\r\n            console.log(\"上传图片结果\");\r\n            let imgurl = res.data.imgurl;\r\n            if (this.imgSrc.indexOf(imgurl) == -1) {\r\n              this.imgSrc.push(imgurl);\r\n            }\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n            this.$message.error({\r\n              message: err.data.message,\r\n              showClose: true,\r\n              duration: 2000\r\n            });\r\n          });\r\n      },\r\n      // 删除图片\r\n      delImage(index) {\r\n        this.imgSrc.splice(index, 1);\r\n      },\r\n    }\r\n  }\r\n\r\n</script>\r\n<style lang=\"scss\">\r\n  .upload-imgs {\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n    position: relative;\r\n    display: flex;\r\n\r\n    .add {\r\n      width: 100px;\r\n      height: 100px;\r\n      position: relative;\r\n      border: 1px solid #ddd;\r\n      border-radius: 5px;\r\n      display: flex;\r\n\r\n      .addIcon {\r\n        width: 50px;\r\n        height: 50px;\r\n        position: absolute;\r\n        top: 45%;\r\n        left: 45%;\r\n        z-index: 1;\r\n      }\r\n\r\n      .inputUpload {\r\n        position: absolute;\r\n        display: block;\r\n        width: 100px;\r\n        height: 100px;\r\n        opacity: 0;\r\n        cursor: pointer;\r\n        z-index: 999;\r\n      }\r\n    }\r\n\r\n    .spanStyle {\r\n      width: 15px;\r\n      height: 15px;\r\n      text-align: center;\r\n      line-height: 0.7;\r\n      background-color: rgb(221, 221, 221);\r\n      color: rgb(255, 255, 255);\r\n      border: 1px solid rgb(221, 221, 221);\r\n      border-radius: 50%;\r\n      position: absolute;\r\n      top: 1px;\r\n      right: 1px;\r\n      z-index: 999;\r\n      cursor: pointer;\r\n    }\r\n\r\n    .previewImg {\r\n      display: flex;\r\n      z-index: 1;\r\n    }\r\n  }\r\n\r\n  .previewImg2 {\r\n    display: flex;\r\n  }\r\n\r\n</style>\r\n"]}]}